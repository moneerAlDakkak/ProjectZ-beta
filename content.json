{
  "js": {
    "pageTitle": "JavaScript Beginner Guide",
    "sections": {
      "JavaScript Basics": {
        "Variables and Data Types": "<ol><li><h4>variables defining</h4><code class='full'>var firstVariable = value, <br>    secondVariable = value2; </code></li><li><h4>Data Types</h4><ul><li>Boolean : true or false</li><li> Array:<code class='full'>var myArray = ['Item0' , 'Item1' , 'Item2'];<em>/* and to call Item0 : */</em>console.log(myArray[0])</code></li><li> Object:<code class='full'>var myInfos = {firstName: 'name1' , lastName: 'name2'}<em>/* and to call name1 : */</em>console.log(myInfos.firstName)</code></li><li>string: 'text'</li><li>Number</li><li>undefined: when calling a variable without defining it </li><li>NaN: when making an operation (other than +) between a number and non number <br>* The function <code>isNan()</code> confirms if the input is a number or not</li><li>Null</li><li>Symbol</li></ul></li></ol><span>Note :</span> you can ask about the data type of an input with the function <code>typeof()</code>",

        "Concatination": "<ul><li>Concatenation is used to link variables in one sentence by using the '+' symbol</li><li>numbers are considered strings when concatenating with other strings and they will be put beside that string <br>for example: 'Ahmed' + 85 = Ahmed85</li><li>more examples: <br>85 + 15 + 'Ahmed' + 25 + 40 = 100Ahmed2540 <br>85 + 15 + 'Ahmed' + (25 + 40) = 100Ahmed65</li></ul>",

        "Conditions": "<ol><li><h4>if condition</h4><code class='full'>if(condition1) {<em>    /* action1 */</em>} else if(condition2) {<em>    /* action2 */</em>} else { <br><em>    /* other action */</em>}</code></li><li><h4>switch condition</h4><code class='full'>switch(value) { <br>    case(value1):<em>        /* action1 */</em>        break; <br>    case(value2):<em>        /* action2 */</em>        break; <br>    default:<em>        /* other action */</em>}</code></li></ol>",

        "Output": "<ul><li><code>document.write()</code> : used for writing on page and you can create html elements with it (not recommended to use)</li><li><code>console.log</code> : to write in console</li>* you can also write codes in the Adress bar by wrriting <code>javascript:</code>  before the code</ul>",

        "Functions": "<ol><li><h4>Syntax of an auto called function </h4><code class='full'>(function myFunction(param1) { <br>var x = ..... ; <br>return x + param1; <br>}()); <br></code></li><li><h4>functions usually contain </h4><ul><li>a variable defining which will define it inside the function only (function scope)</li><li>A condition</li><li>the return line says what the function gives when it is called</li><li>params : we use params to include a value in our function when we call the function not inside the function itself</li></ul><span>Note :</span> to stop auto calling the function we remove the () in the begining and end of the function.</li></ol>",

        "Events": "<ol><li><h4>How to use it</h4><ul><li>Element.Event = function() {}</li><li>Element.Event = myFunction ;</li><li>As attribute (event='myFunction()')</li></ul></li><li><h4>Most used events</h4><ul><li>onclick</li><li>ondblclick</li><li>onload : performs the action when the page is completely loaded</li><li>onkeydown</li><li>onkeyup : performs the action when you raise your finger of the keyboard</li><li>onkeypress : performs the action while you're holding your finger on keyboard</li><li>onmouseenter: performs the action when the mouse is over the element</li><li>onmouseleave: performs the action when the mouse is gone from over the element</li><li>onchange: performs the action when the element's value changes (usually used in select menus)</li><li>onfocus</li><li>onblur</li><li>onscroll</li><li>onresize</li><li>onsubmit</li><li>oncontextmenu(right click)</li></ul></li></ol>",

        "Loops": "<ol><li><h4>for loop</h4><code class='full'>for (starting value; loop's condition; operation) {<em>    /* repeated assignment with an increasing value of i aslong as the condition is implemented */</em> }</code>Example :<code class='full'>var friends = ['Ahmed', 'Zeinab', 'Sameer' ] <br>var i <br>for (i = 0; i &lt; friends.length; i++) { <br>console.log(friends[i]) <br>}<em>/* that loop will return : */</em>Ahmed <br>Zeinab <br>Sameer <br></code></li><li><h4>for in loop</h4>The for in loop deals with Objects as it applies the assignment on the object properties<code class='full'>var myPhone = {<br>manufacturer: samsung,<br>model: A30,<br>color: blue,<br>}, <br>prop; <br>for (prop in myPhone) { <br> if(myPhone.hasOwnProperty(prop)) {<br>        console.log(prop + ':' + myPhone[prop]) <br>&nbsp; } <br>}<em>/* that loop will return : */</em>manufacturer: samsung<br>model: A30<br>color: blue,<br></code></li><li><h4>while loop</h4><code class='full'>var loopVariable = value;<br>while (condition) { <br><em>/*    assignment including the operation */</em>}</code></li><li><h4>do while loop</h4>performs the assignment at least once beforechecking the condition. <br><code class='full'>var loopVariable = value;<br> do {<em>   /* assignment including the operation *</em>} while (condition) ; </code></li><li><h4>loop controls</h4><ul><li><code>h4</code> : used to give the loop a name to control it with other the control tools</li><li><code>break</code> : stops the loop</li><li><code>continue</code> : deletes the value which implements the condition then continues the loop without that value</li></ul>for better understanding and more examples of loop controls watch <a href='https://youtu.be/-kpIv-1alTE' target='_blank'>this</a></li></ol>",
        "Regular Expression": "<ol><li><h4>/&nbsp;&nbsp;&nbsp;/......</h4><ul><li>i : insensitive charachters</li><li>g : global search (more than one result)</li><li>m : multiple line search</li></ul></li><li><h4>[........]</h4> to perform action on a Character / Range of characters<ul><li>[character]</li><li>[^character] : not character (performs action on all characters except the one in brackets)</li><li>Ranges : <br>[a-z], [A-Z], [0-9], [A-z]</li><li>not-this Ranges : <br>[^a-z], [^A-Z], [^0-9], [^A-z]</li><li>Double Range :  [0-9a-z] </li></ul></li><li><h4>Quantifiers</h4><ul><li>letter+ : the word has the letter once</li><li>letter{number} : the word has the letter number times</li><li>letter{number1, number2} : the word has the letter number1 or number2 times</li><li>letter{number,} : the word has the letter atleast number times</li></ul></li></ol><span>Note :</span>  The brackets and quantifiers are written in charachter place <code class='full'><em>/* examples on how Regular Expression is used : */</em><em>/* the following code will replace every letter that is not (e) in myString with the letter b : */</em>myString.replace(/[^e]/g, b) <em>/* the following code will search for the letter (e) where it is repeated 3 times in a word (capital or small letter) */</em>myString.search(/e{3}/i)</code>",
        "Maths, Numbers and Operators": "<ol><li><h4>operators</h4><ul><li>+ , - , * , /</li><li>x % y : gives you the remainder of x by y</li><li>increament : a++ , a+=1 , a=a+1</li><li>decreament : a-- , a-=1 , a=a-1</li></ul></li><li><h4>conditional operators</h4><ul><li>= : has no condition meaning <br>== : compares value only <br>=== : compares value and data type</li><li>!= : not equal in value <br>!== : not equal in value nor in data type</li><li>&& : to demand more than one condition in the same time (in the same if) <br>|| : to demand one of multiple conditions in the same if</li></ul></li><li><h4>math methods</h4><ul><li><code>ceil(value)</code> : convert the value to the closest greater number<br><code>floor(value)</code> : convert the value to the closest less number<br><code>round(value)</code> : convert the value to the closest number</li><li><code>min(value1, value2, value3)</code> <br><code>max(value1, value2, value3)</code></li><li><code>random() </code> : returns a random number which is equal to or greater than 0 but never equal to or greater than 1 <br><code class='full'><em>/* this is a code that results a random number between 1 and 10 : */</em>math.floor(math.random() * 10 + 1)</code></li></ul></li><li><h4>Numbers methods</h4><ul><li><code>myNumber.toString()</code></li><li><code>myNumber.toExponential()</code> : writes the number in the following form : 0.n * 10·µê</li><li><code>myNumber.toFixed(X)</code> : approximates the input keeping X numbers right to the point</li><li><code>myNumber.parseint()</code> : converts the input to a number only (without a unit)</li></ul></li></ol>",
        "Arrays": "<code class='full'>var arrayName = ['Item0', 'Item1', 'Item2'];<em>/* This line returns the first Item (Item0) in console : */</em>console.log(arrayName[0])</code>* to check if Input is Array or not we can use Array.isArray(Input)<h4>Array methods </h4><ol><li><h4>Get/Set length</h4><code>myArray.length</code>/ <code>myArray.length = 2</code><br>and the second example here sets the length of myArray to 2 Items.</li><li><h4>Converting to String</h4><ul><li><code>myArray.tostring()</code></li><li><code>myArray.toLocalString()</code></li><li><code>myArray.join('seperator')</code> : converts the Array to a string with the seperator between the items</li></ul></li><li><h4>Searching in Arrays</h4><ul><li>Staring from first: <br> <code>myArray.indexOf('ItemName', startingIndex)</code> <br>*returns the value (-1) if the item (itemName) doesn't exist in myArray .</li><li>Starting from last(indexes of Items remains the same): <br><code>myArray.lastIndexOf('ItemName', StartingIndex)</code></li></ul></li><li><h4>Sorting Arrays</h4><ul><li>Alphabetical : <code>myArray.sort()</code></li><li>Reverse : <code>myArray.reverse()</code></li></ul></li><li><h4>Adding / Deleting items</h4><ul><li>Adding items :<ul><li><code>myArray[myArray.length] = 'newItem'</code></li><li><code>myArray.push('newItem')</code> : adds the newItem to the end of myArray</li><li><code>myArray.unshift('newItem')</code> : adds the newItem to the begining of myArray</li><li> <code>myArray.splice(index, deleted items number,'newItem1', 'newItem2')</code></li></ul></li><li>Deleting / Getting Items :<ul><li><code>myArray.pop()</code> : delets/gets the last item in myArray</li><li><code>myArray.shift()</code> : deletes/gets the first item in myArray</li></ul></li></ul></li><li><h4>Slicing and Combining Arrays</h4><ul><li>Slicing : <br><code>myArray.slice(startingIndex, EndingIndex)</code> <br>* you can use negative values here</li><li>Combining :<br>   <code>myArray1.concat(myArray2, myArray3)</code></li></ul><span>Note :</span> Sliced and Combined Arrays are Arrays too</li></ol>",
        "Strings": "The String is simply a text which is written inside <code >' '</code> .<br> however, it may contain html &amp; css codes too.<h4>Strings methods :</h4><ol><li><h4>Getting length</h4><ul><li><code>myString.length</code></li></ul></li><li><h4>Converting to String</h4><ul><li><code>string(myInput)</code></li><li><code>myInput.tostring()</code></li></ul></li><li><h4>Searching in Strings</h4><ul><li><code>myString.indexOf('word')</code><br>*returns the value (-1) if the word (word) doesn't exist in mystring .</li><li><code>myString.lastIndexOf('word')</code></li><li><code>myString.search('word')</code></li><li><code>myString.charat(index)</code></li><li><code>myString.charcodeat(index)</code></li></ul></li><li><h4>Combining/Cutting</h4><ul><li>Combining:<ul><li>       <code>myString.concat('new string1', 'new string2')</code></li><li><code>string.fromcharcode(letter code1, letter code2 ...)</code> : to make a string out of letter codes</li></ul></li><li>Cutting :<ul><li><code>myString.slice(startIndex, endIndex)</code></li><li><code>myString.substring(startIndex, endIndex)</code> : differs from slice for the ability to write start and end index in both values</li><li><code>myString.substr(startIndex, length)</code></li><li><code>myString.split('word seperator', number of objects wanted)</code> : converts the String to Array</li></ul></li></ul></li><li><h4>Editing Strings</h4><ul><li><code>myString.replace(value, new value)</code> : The value can be a word or a letter</li><li><code>myString.touppercase()</code></li><li><code>myString.tolowercase()</code></li><li><code>myString.trim()</code> : to clear the extra unwanted spaces</li><li><code>myString.link('link')</code></li></ul></li></ol>",
        "Date": "<ol><li><h4>Date writing</h4><ul><li><code>new date()</code> : gives the current time and date</li><li><code>new date(milliseconds)</code> : adds the milliseconds to 1/1/1970 00:00:00</li><li><code>new date('month day year hours:minutes:seconds')</code></li><li><code>new date(year, month, day, hour, minutes, seconds, millseconds)</code></li></ul></li><li><h4>Date formats</h4><ul><li>Full/Long format : 'month day year hours:minutes:seconds'</li><li>Short format : 'month/day/year hours:minutes:seconds'</li><li>ISO format : 'year-month-day hours:minutes:seconds TDZ'</li></ul></li><li><h4>Date methods :</h4><ol><li><h4>Getting/Setting Date</h4><table><tr><td>Getting</td><td>Setting</td><td>Result / Input</td></tr><tr><td><code>getDate()</code></td><td><code>setDate()</code></td><td>1-31</td></tr><tr><td><code>getDay()</code></td><td>-</td><td>0-6</td></tr><tr><td><code>getFullYear()</code></td><td><code>setFullYear()</code></td><td>year (months/days are optional for setting)</td></tr><tr><td><code>getMonth()</code></td><td><code>setMonth()</code></td><td>Month (day is optional for setting)</td></tr><tr><td><code>getHours()</code></td><td><code>setHours()</code></td><td>Hours (anything smaller is optional for setting)</td></tr><tr><td><code>getMinutes()</code></td><td><code>setMinutes()</code></td><td>Minutes (anything smaller is optional for setting)</td></tr><tr><td><code>getSeconds()</code></td><td><code>setSeconds()</code></td><td>Seconds (milliseconds are optional for setting)</td></tr><tr><td><code>getMilliseconds()</code></td><td><code>setMilliseconds()</code></td><td>Milliseconds</td></tr><tr><td><code>getTimezoneOffset()</code></td><td>-</td><td>gets the difference between UTC and the local time (in minutes)</td></tr><tr><td><code>getTime()</code> / <code>now()</code></td><td>-</td><td>gets the milliseconds from 1/1/1970 until this moment</td></tr><tr><td><code>parse(myDate)</code></td><td>-</td><td>gets the milliseconds from 1/1/1970 to a specific date </td></tr></table></li><li><h4>Converting formats</h4><ul><li><code>myDate.toISOString()</code></li><li><code>myDate.toDateString()</code></li><li><code>myDate.toTimeString()</code></li></ul></li></ol></li></ol>"
      },
      "DOM": {
        "Dom Selectors": "<h4>Getting/Setting Elements in Document </h4> everything listed here is written after the word document : <ul> <li> <code>.getElementById('id')</code> </li> <li> <code>.getElementsByClassName('class')</code> </li> <li> <code>.getElementsByTagName('tag')</code> </li> <li> <code>.querySelector/All('selector')</code> </li> <li> Finding Elements as Objects : <ul> <li><code>.title</code></li> <li><code>.body</code></li> <li><code>.images</code></li> <li> <code>.forms</code> <code class='full'> <em>/* the following code will get the value of the input with name='z1' in the first form */</em> document.forms[0].z1.value </code> </li> <li><code>.anchors</code> : anchors are the a tags without href attribute</li> <li> <code>.links</code> : links are the a tags with href attribut </li> <li> <code>myDiv.children</code> : Element children only <br> * you can know the number of these Elements with : <code>document.childElementCount</code> </li> <li> <code>myDiv.childNodes</code> : all child Nodes including text and comments </li> </ul> </li> <li> <code>.firstElementChild</code> / <code>.lastElementChild</code> : Elements only </li> <li> <code>.firstChild</code> / <code>.lastChild</code> : for Nodes </li> <li> <code>.parentElement</code> / <code>.parentNode</code> </li> <li> <code>.nextSibling</code> / <code>.nextElementSibling</code> </li> <li> <code>.previousSibling</code> / <code>.previousElementSibling</code></li> </ul> <h4> getting/setting element content </h4> <ul> <li><code>.innerHTML</code> : <br> gets/sets the entire content of the Element including children Elements </li> <li><code>.textContent</code> : <br> gets/sets only the text inside the Element </li> </ul> <h4> Nodes (name and type) </h4> <table> <tr> <td><code>.nodeName</code></td> <td><code>.nodeType</code></td> </tr> <tr> <td>Element</td> <td>1</td> </tr> <tr> <td>attribute</td> <td>2</td> </tr> <tr> <td>text</td> <td>3</td> </tr> <tr> <td>comment</td> <td>8</td> </tr> </table>",
        "Attributes": "<h4>Getting/Setting Attributes</h4> <ul> <li> <code>myElement.attribute.value</code> </li> <li> <code>myElement.getAttribute('attr')</code> </li> <li> <code>myElement.setAttribute('attr', 'value')</code> <br> *.setAttribute creates the attribute (attr) if it doesn't exist in the first place. </li> </ul> <h4> removing/checking attribues </h4> <ul> <li> <code>myElement.hasAttribute('attr')</code> : to check if the element has the attribute (attr) or not </li> <li> <code>.removeAttribute('attr')</code> : to remove the attribute (attr) </li> </ul>",
        "classList": "<code>myElement.classList</code> : a method that gives the classes of the element(myElement) as an Array. <br> <h4> .classList methods </h4> <ul> <li> <code>.contains('class1')</code> : to check if the element has the class (class1) or not </li> <li> <code>.length</code> : to check how many classes the Element has </li> <li> <code>.item(n)</code> : to get the class number (n+1) in the classList (zero based index) </li> <li> <code>.add('class1')</code> : equals to (element.className += class1) </li> <li><code>.remove('class1')</code></li> <li> <code>.toggle('class1')</code> : adds and removes the class1 </li> </ul>",
        "Creating Nodes": "<ul> <li> Creating Element : <code>document.createElement('div')</code> </li> <li> Creating text : <code>document.createTextNode('aText')</code> </li> <li> Creating Comment : <code>document.createComment('aComment')</code> </li> <li> inserting the created Elements : <ul> <li> <code>parentElement.appendChild(childElement)</code> </li> <li> <code>nextElement.insertBefore(createdElement)</code> </li> </ul> </li> <li> Creating and Setting Attribute : <br> <code class='full'> myAttr = document.createAttribute('attr'); <br> myAttr.value = value1; <br> myElement.setAttributeNode(myAttr); <em>/* you can also use <code>setAttribute()</code> instead */</em> </code> </li> </ul>",
        "Dom functions": "<ul> <li> <code>.addEventListener('myEvent', myfunction())</code> : to add the event (myEvent) on the selected element. </li> <li> <code>.click()</code> : performs the click event on the selected element. </li> <li> <code>.focus()</code> / <code>.blur()</code> : focuses / blures the selected element. </li> <li> <code>.cloneNode(true / false)</code> : to clone the selected element and then use insert before or append child to place it. </li> <li> <code>myMain.contains(myChild)</code> : to check if the element myChild is contained in the element myMain or not. </li> <li> <code>.preventDefault()</code> : to prevent the default action of an Element <code class='full'> <em>/* the following function will disable the contextmenu: */</em> document.oncontextmenu = function (e) { <br> &nbsp; &nbsp; e.preventDefault(); <br> } <em>/* The e letter refer to the event object */</em> </code> </li> </ul>",
        "Dimensions & Styling": "<h4>Styling </h4> myElement.style.property = 'value' ; <br> <h4> (client/offset/scroll) Dimensions </h4> here is a quick comparison between : <ul> <li> <code>.clientHeight</code> / <code>.clientWidth</code> </li> <li> <code>.scrollHeight</code> / <code>.scrollWidth</code> </li> <li> <code>.offsetHeight</code> / <code>.offsetWidth</code> </li> </ul> <table> <tr> <td></td> <td>client</td> <td>scroll</td> <td>offset</td> </tr> <tr> <td>content</td> <td>Yes</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>scrollable <br> hidden content</td> <td>No</td> <td>Yes</td> <td>No</td> </tr> <tr> <td>padding</td> <td>No</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>border</td> <td>No</td> <td>No</td> <td>Yes</td> </tr> <tr> <td>scroll bar</td> <td>No</td> <td>No</td> <td>Yes</td> </tr> <tr> <td>margin</td> <td>No</td> <td>No</td> <td>No</td> </tr> </table>"
      },
      "BOM": {
        "Window(Alerts / Scrolls / Timing)": "window is the default object in Js which means that you don't have to write it when using window methods. <ol><li><h4>Page Alerts</h4><ul><li><code>alert('')</code></li><li><code>confirm('')</code> : returns boolean value</li><li><code>prompt('', 'default text')</code> : returns a string that contains what is written in prompt text field</li></ul></li><li><h4>Timing methods</h4><ul><li><code>setTimeout(myFunction, time)</code> : waits the time (in ms) before performing the function (myFunction)</li><li><code>clearTimeout(mySet)</code> : to cancel a Timeout and the function it performs (after storing setTimeout in a variable)</li><li><code>setInterval(myFunction, time)</code> : repeats the function every time the chosen time (in ms) ends</li><li><code>clearInterval(mySet)</code> : to stop an Interval   and stop repeating the function it performs (after storing setInterval in a variable)</li></ul></li><li><h4>Scrolls</h4><ul><li><code>scrollBy(x,y)</code> <br>* x and y can take negative values here to start slicing from the end of the string</li><li><code>scrollTo(x,y)</code></li><li><code>scrollX</code> / <code>pageXOffset</code> : gets you the scroll amount on X</li><li><code>scrollY</code> / <code>pageYOffset</code> : gets you the scroll amount on Y</li><li>here is a quick comparison between<code>innerWidth</code> / <code>innerHeight</code> and <code>outerWidth</code> / <code>outerHeight</code></li></ul></li><li><h4>Dimensions</h4>innerWidth/innerHeight and outerWidth/outerHeight <br>here is a comparison between them : <br><img src='../assets/windim.jpg' alt='comparison'/></li></ol>",
        "Window(location / open)": "<ol> <li> <h4>.open</h4> opens a new window .<br> Syntax : <code>window.open('url', 'name/attribute', 'specs', 'history replace')</code> <ul> <li>url</li> <li> name : to refer to the opened window </li> <li> attribute : <code>_blank</code> , <code>_self</code>, etc... </li> <li> specs : width, height, left/right/top/down, menubar(yes/no), status(yes/no) <br> </li> <li> history replace: true or false inside the quotes. <br> Example : <code class='full'> window.open('https://www.google.com', '_blank', 'width=500,menubar=yes', 'true') </code> </li> </ul> </li> <li> <h4>.location</h4> <ul> <li> <code>.href</code> : gets/sets the entire page link </li> <li> <code>.host</code> : gets/sets the page host only </li> <li> <code>.hash</code> : gets/sets the hashtag in the link </li> <li> <code>.protocol</code> : gets/sets the protocol of the page </li> <li> <code>.hostname</code> </li> <li> <code>.pathname</code> : gets/sets the path of the page inside the website </li> <li> <code>.search</code> <code class='full'> <em>/* This code will give the full link of the page you are in : */</em> console.log(location.hostname + location.pathname + location.search) </code> </li> <li> <code>.replace('link1')</code> : takes the user to the page with the link1 and replaces the previous page in history </li> <li> <code>.assign('link1')</code> : takes the user to the page with the link1 and doesn't replace the previous page in history </li> <li> <code>.reload(true / false)</code> : reloads the page from server(true) or from cache(false) </li> </ul> </li> </ol>",
        "History": "<ul> <li> <code>.back()</code> : takes thee user to the vious page in history </li> <li> <code>.forward()</code> : takes thee user to the next page in history </li> <li> <code>.go(n)</code> : takes the user n pages forward (n &gt; 0) or backwards(n &lt; 0) </li> </ul>",
        "Screen": "<ul> <li><code>.width</code></li> <li><code>.height</code></li> <li> <code>.availWidth</code> : available screen width without the operating system interface </li> <li> <code>.availHeight</code> : available screen height without the operating system interface </li> <li><code>.colorDepth</code> / <code>.pixelDepth</code></li> </ul>",
        "Navigator": "gives informations about the browser the user uses . <ul> <li><code>.appCodeName</code></li> <li><code>.appName</code></li> <li><code>.appVersion</code></li> <li><code>.platform</code></li> <li><code>.cookieEnabled</code></li> <li><code>.language</code></li> <li><code>.online</code></li> <li><code>.product</code></li> </ul>",
        "Cookies": "<ol> <li> <h4>Creating</h4> <code class='full'> document.cookie = ' name=name1; expires=Date1; path=/ '; </code> <ul> <li><code>name</code> : the name of the cookie (can be any name)</li> <li><code>expires</code> : a date when the cookie expires (as explained in date section)</li> <li><code>path</code> : the path where the cookie makes effect (the path in the example makes effect on all the website)</li> </ul> </li> <li> <h4>Modifying</h4> <ul> <li>To modify a cookie name value we rewrite the cookie with the new value</li> <li>To modify a cookie date we rewrite the cookie with the new date</li> <li>We can't modify a cookie path because that will create another cookie with the same name instead</li> </ul> </li> <li> <h4>Deleting</h4> To delete a cookie we modify its expiration date to some date in the past </li> </ol>"
      }
    }
  },
  "html": {
    "pageTitle": "The Ultimate Html Guide",
    "sections": {
      "": {
        "Basic Structure": "<ol> <li> <h4>Basic Structure</h4> <code class='full'> &lt;!DOCTYPE html&gt; <br> &lt;html&gt; <br>      &lt;head&gt;     <em>&lt;!-- head tags goes here --&gt;</em>          &lt;link rel='stylesheet' href='style.css'/&gt; <br>      &lt;/head&gt; <br>      &lt;body&gt;     <em>&lt;!-- body elements goes here --&gt; </em>          &lt;script src='main.js'&gt;&lt;script&gt; <br>      &lt;/body&gt; <br> &lt;/html&gt; <br> </code> </li> <li> Every page should start with the tag <code>&lt;!DOCTYPE&gt;</code> which defines the language or the version your page is written in . In html5 we write <code>&lt;!DOCTYPE html&gt;</code> </li> <li> <h4>Page head</h4> The <code>&lt;head&gt;</code> tag contains some tags that we can say the page settings. The most used head tags are : <ul> <li> <code>&lt;title&gt;</code> : contains the title that appears when your page is open in the browser </li> <li> <code>&lt;link&gt;</code> : to link a new file to your project. It has two attributes : <ul> <li> <code>rel</code> : defines the relation between the html file and the new one. here is some of its values : <ul> <li> stylesheet : for css files and the font files. </li> <li> icon : for the icon of the page that appears besides the page title. </li> <li> preconnect : you can see this in google fonts links for example. </li> </ul> </li> <li> <code>href</code> : to enter the path that the file will load from. </li> </ul> </li> <li> <code>&lt;script&gt;</code> : can be written in the head to load the script before the body of the page or in the bottom of the body (before the closing tag) to load the script after the body and you can use it to load the script or to write inside the tag itself. It has some attributes you can read about, and it has the attribute : <ul> <li> <code>src</code> : to enter the path that the file will load from. </li> </ul> </li> <li> <code>&lt;style&gt;</code> : to style your page using css without an external file </li> <li> meta tags:  We mention some of them which are the most used <ul> <li> <code>&lt;meta charset='UTF-8'/&gt;</code> </li> <li> <code>&lt;meta name='viewport' content='width=device-width initial-scale=1'/&gt;</code> : plays a big role in the responsive design </li> <li> <code> &lt;meta name='description' content='our page description in search engines'/&gt; </code> </li> </ul> </li> </ul> </li> </ol> Congratulations! now you are able to create your first page. ",
        "Semantic Elelments": "Semantically html coding is to use the element in its right place which will help your code being organized and help your site with SEO. <ol> <li> <h4>Semantic Elements</h4> <ul> <li><code>&lt;header&gt;</code></li> <li><code>&lt;nav&gt;</code></li> <li><code>&lt;main&gt;</code></li> <li><code>&lt;footer&gt;</code></li> <li><code>&lt;article&gt;</code></li> <li><code>&lt;aside&gt;</code></li> <li><code>&lt;section&gt;</code></li> <li><code>&lt;dialog&gt;</code></li> <li><code>&lt;hgroup&gt;</code> : a container for headings and sub-headings</li> <li><code>&lt;figure&gt;</code> : a container for an img and a <code>&lt;figcaption&gt;</code></li> <li><code>&lt;figcaption&gt;</code></li> <li><code>&lt;details&gt;</code></li> <li><code>&lt;summary&gt;</code> : the title of the <code>&lt;details&gt;</code> element</li> </ul> </li> </ol> <img src='../assets/semantics.jpg'/>",
        "Forms": "<h4>form elements</h4> <ul> <li> The inputs : <br> All the following are the <code>&lt;input&gt;</code> element with different <code>type</code> attribute. <ul> <li><code>type='text'</code> : for text input</li> <li><code>type='number'</code> : for number input only</li> <li><code>type='password'</code> : displays the input as stars</li> <li><code>type='file'</code> : to allow the user to upload a file</li> <li><code>type='color'</code> : to input a color from the color plate</li> <li><code>type='search'</code></li> <li><code>type='radio'</code> : </li> <li><code>type='checkbox'</code> :</li> <li><code>type='button'</code></li> <li><code>type='range'</code></li> <li><code>type='image'</code></li> <li><code>type='url'</code></li> <li><code>type='hidden'</code></li> </ul> </li> <li> <code>&lt;textarea&gt;</code> : a resizable by default text input. you can set it to be uneditable with the attribute <code>readonly</code>. </li> <li><code>&lt;button&gt;</code> : same as <code>&lt;input type='button'&gt;</code></li> <li><code>&lt;fieldset&gt;</code> : a frame around the the form</li> <li><code>&lt;legend&gt;</code> : the title of the <code>&lt;fieldset&gt;</code></li> <li><code>&lt;fieldset&gt;</code></li> <li><code>&lt;label&gt;</code> : a label for the element with its id written in label <code>for</code> attribute.</li> <li> Select menus : there are 3 main elements in select menus <ul> <li> <code>&lt;select&gt;</code> <ul> <li><code>name</code></li> <li><code>multiple</code> : defines if the user is allowed to chose more than one option or not</li> <li><code>size</code></li> <li><code>disabled</code></li> </ul> </li> <li> <code>&lt;option&gt;</code> <ul> <li> <code>label</code> : is a short text that represents the option in the select menu . </li> <li><code>value</code></li> <li><code>selected</code></li> <li><code>disabled</code></li> </ul> </li> <li> <code>&lt;optgroup&gt;</code> : to organize options in groups <ul> <li><code>label</code></li> <li><code>selected</code></li> <li><code>disabled</code></li> </ul> </li> </ul> </li> </ul>",
        "Text Formatting": "<ul> <li> <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> : different sizes headings . The bigger of them which is the h1 should be used only one time in a single page </li> <li> <code>&lt;span&gt;</code>: used to style or seperate a part of text without selecting / styling the whole text </li> <li> <code>&lt;p&gt;</code> : paragraph </li> <li> <code>&lt;strong&gt;</code> / <code>&lt;b&gt;</code> : for a bold text <b>test</b> </li> <li> <code>&lt;em&gt;</code> / <code>&lt;i&gt;</code> for an italic text : <i>test</i> </li> <li> <code>&lt;small&gt;</code> : <small>test</small> </li> <li> <code>&lt;pre&gt;</code> : preformatted text, represents the text in the html page exactly how it is written inside of it </li> <li> <code>&lt;sub&gt;</code> : (subscript)<sub>test</sub> </li> <li> <code>&lt;sup&gt;</code> : (superscript)<sup>test</sup> </li> <li> <code>&lt;strike&gt;</code> / <code>&lt;del&gt;</code> : <del>test</del> </li> <li> <code>&lt;mark&gt;</code> : <mark>test</mark> </li> <li> <code>&lt;u&gt;</code> / <code>&lt;ins&gt;</code> : underlined text : <u>test</u> </li> <li> <code>&lt;q&gt;</code> : quote : <q>test</q> </li> <li> <code>&lt;blockquote&gt;</code> : same as <code>&lt;q&gt;</code> but the display property for it is <code>block</code> </li> <li> <code>&lt;abbr&gt;</code> : the text inside it becomes an abbrevation of the text in the <code>title</code> attribute . try hovering on <abb title='cool text here isn't it ?'>test</abb> </li> <li> <code>&lt;wbr&gt;</code> : you put this tag inside a long one word to tell the browser it can break that long word from this place not somewhere else. </li> <li> <code>&lt;bdi&gt;</code> : use this tag when you are writing in two languages and each has a different direction. put the the word that has a different direction inside a <code>&lt;bdi&gt;</code>. </li> <li> <code>&lt;code&gt;</code> : used to write codes inside of it, it gives you a code font by default and you can customize it further more with css like all elements. </li> <li> <code>&lt;a&gt;</code> : to add links to your page. Its attributes : <ul> <li><code>href</code> : which we write an external or an internal link inside of it</li> <li> <code>target</code> : which defines where the link will be open <ul> <li> _blank : in a new window </li> <li> _self : in the same window </li> <li> _parent : in the the parent frame </li> <li> _top : in the full body of the window </li> <li> framename : in the iframe element which has the name framename </li> </ul> </li> </ul> </li> </ul>",
        "Table": "<ol> <li> <h4>Tables</h4> <code>&lt;table&gt;</code> elements are : <ul> <li><code>&lt;thead&gt;</code> : the table head which is in the first rows</li> <li><code>&lt;tbody&gt;</code>: the table body is the rows in the middle</li> <li><code>&lt;tfoot&gt;</code> the table foot is the rows in the end of the table</li> <li><code>&lt;tr&gt;</code> : table row (contains the table cells)</li> <li><code>&lt;th&gt;</code> : same as <code>&lt;tr&gt;</code> but it's is used in the table head</li> <li><code>&lt;td&gt;</code> : the cells in the table</li> </ul> <code>&lt;table&gt;</code> Attributes : <ul> <li><code>rowspan</code> : sets the number of rows the cell should span to</li> <li><code>colspan</code> : sets the number of columns the cell should span to</li> </ul> <code>&lt;table&gt;</code> structure : <code class='full'> &lt;table&gt; <br>     &lt;thead&gt; <br>         &lt;tr&gt; <br>             &lt;td&gt; <br>             &lt;/td&gt; <br>             &lt;td&gt; <br>             &lt;/td&gt; <br>         &lt;/tr&gt; <br>     &lt;/thead&gt; <br>     &lt;tbody&gt; <br>         &lt;tr&gt; <br>             &lt;td&gt; <br>             &lt;/td&gt; <br>             &lt;td&gt; <br>             &lt;/td&gt; <br>         &lt;/tr&gt; <br>     &lt;/tbody&gt; <br>     &lt;tfoot&gt; <br>         &lt;tr&gt; <br>             &lt;td&gt; <br>             &lt;/td&gt; <br>             &lt;td&gt; <br>             &lt;/td&gt; <br>         &lt;/tr&gt; <br>     &lt;/tfoot&gt; <br> &lt;/table&gt; </code> </li> <li> <h4>Lists</h4> <ul> <li><code>&lt;ul&gt;</code> : unorderd lists</li> <li><code>&lt;ol&gt;</code> : ordered lists</li> <li><code>&lt;dl&gt;</code></li> <li>every list of these contains a number of <code>&lt;li&gt;</code> elements (list items)</li> </ul> </li> </ol>",
        "Multimedia": "<ol> <li> <h4>&lt;img&gt;</h4> the <code>&lt;img&gt;</code> tag attributes : <ul> <li> <code>src</code> : to select the path of the image </li> <li><code>title</code></li> <li> <code>alt</code> : an alternative text of the image that appears when the image fails for some reason. </li> <li> <code>loading</code> : <ul> <li> eager : loads the image immediately </li> <li> lazy : loads the image only when you scroll near it </li> </ul> </li> </ul> </li> <li> <h4>&lt;video&gt;&lt;/video&gt;</h4> the video tag contains : <ul> <li> <code>autoplay</code> / <code>controls</code> : Attributes to choose how the video is played </li> <li> <code>muted</code> </li> <li> <code>loop</code> </li> <li> <code>&lt;source&gt;</code> the source tag in the video tag contains the attributes : <ul> <li> <code>src</code> : to select the path of the video </li> <li> <code>type</code> : to define the type of the video. For example <code>type='video/mp4'</code> </li> </ul> </li> </ul> </li> <li> <h4>&lt;audio&gt;&lt;/audio&gt;</h4> the audio tag contains : <ul> <li> <code>autoplay</code> / <code>controls</code> : Attributes to choose how the audio is played </li> <li> <code>muted</code> </li> <li> <code>loop</code> </li> <li> <code>&lt;source&gt;</code> the source tag in the audio tag contains the attributes : <ul> <li> <code>src</code> : to select the path of the audio file </li> <li> <code>type</code> : to define the type of the audio. For example <code>type='audio/mp3'</code> </li> </ul> </li> </ul> </li> <li> <h4>&lt;iframe&gt;</h4> this tag allows to include a web page inside your current page. its attributes : <ul> <li>loading : same as the <code>&lt;img&gt;</code> tag</li> <li>name</li> <li>src</li> </ul> </li> </ol>",
        "Selectors & data attributes": "<ol> <li> <h4>id vs class comparison</h4> <ul> <li> use the id selector for unique elements. Which means that you can't use one id for more than one element. </li> <li> use the class selector for non-unique elements. Unlike the id selector, we can give the same class for more than one element. </li> </ul> </li> <li> <h4>data Attributes</h4> <code class='full'>&lt;div data-something='123'&gt;&lt;/div&gt;</code> what we write after <code>data-</code> is optional and the value is optional too. <br> data attributes are used to store some value in an element to use it in a certain way with that element. <br> here is a simple concept on the use of it : <code class='full'> &lt;div data-test='hi'&gt;&lt;/div&gt; <br> &lt;script&gt; <br>      console.log(document.querySelector('div').getAttribute('data-test')) <em>// that will print 'hi' in console</em> &lt;/script&gt; </code> </li> </ol>"
      }
    }
  }
}
